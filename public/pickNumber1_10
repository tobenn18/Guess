Pick a number 1 - 10

- Store the allowed number of guesses in a variable
- Generate a random number
- Store that number in a variable
- Know when a user clicks the button
- Compare their guess with the generated number
    - Check to see if it's too high
        - Tell them it's too high
        - Subtract a guess
        - Check to see if their guesses left is 0
    - Check to see if it's too low
    - Check to see if it's correct 


<!----->

- Hook up the button to an event that fires the compare function
    - EventTarget.addEventListener(eventType, handleFunction, false) ( node == document.getElementById())
    // jquery $("#id").on("click", function () {})
- Validation (make sure the value provided a number, make sure the input field not blank)
    - before running compare function
- change console.logs to a method that outputs text to the #messages div (so the user can see it on the page easily)
- update messages to include the number of guesses remaining
- implementing some basic css



------------------------------------
- Switch from inline styles to using classes
    - Set up a css file with those classes
- Begin using jQuery (cdnjs.com)
- Convert events from plain javascript to jquery event handlers
- convert innerHTML of messages to jquery html()
- Create a messageUser function that sets the html/class of the message div
    - Use addClass/removeClass (or maybe toggleClass) inside of this to set the appropriate class of the message div


    What to do next?
        - convert css to sass
        - convert guessing game to angular directive
